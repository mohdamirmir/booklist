{"version":3,"sources":["contexts/BookContext.js","components/BookDetails.js","components/BookList.js","components/Navbar.js","components/NewBookForm.js","App.js","serviceWorker.js","index.js"],"names":["BookContext","createContext","BookContextProvider","props","useState","title","author","id","books","setBooks","Provider","value","addBook","Math","random","console","log","removeBook","filter","book","children","BookDetails","useContext","onClick","className","BookList","length","map","key","Navbar","NewBookForm","setTitle","setAuthor","onSubmit","e","preventDefault","type","placeholder","onChange","target","required","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2LA2CaA,EAAcC,0BAyBZC,EAvBa,SAACC,GAAW,IAAD,EACXC,mBAAS,CACjC,CAACC,MAAO,mBAAoBC,OAAQ,mBAAoBC,GAAI,GAC5D,CAACF,MAAO,mBAAoBC,OAAQ,oBAAqBC,GAAI,KAH1B,mBAC9BC,EAD8B,KACvBC,EADuB,KAgBrC,OACE,kBAACT,EAAYU,SAAb,CAAsBC,MAAO,CAAEH,QAAOI,QAZxB,SAACP,EAAOC,GAEhBG,EAAS,GAAD,mBAAKD,GAAL,CAAW,CAACH,MAAOA,EAAOC,OAAQA,EAASC,GAAIM,KAAKC,aAC5DC,QAAQC,IAAIX,EAAMC,IASuBW,WAL9B,SAACV,GAClBE,EAASD,EAAMU,QAAO,SAAAC,GAAI,OAAIA,EAAKZ,KAAOA,SAKvCJ,EAAMiB,WC9CEC,EAdK,SAAC,GAAY,IAAXF,EAAU,EAAVA,KACdF,EAAeK,qBAAWtB,GAA1BiB,WAGJ,OAEI,wBAAIM,QAAW,kBAAMN,EAAWE,EAAKZ,MACpC,yBAAKiB,UAAY,SAASL,EAAKd,OAC/B,yBAAKmB,UAAY,UAAUL,EAAKb,UCU1BmB,EAjBE,WAAO,IAEdjB,EAASc,qBAAWtB,GAApBQ,MAEN,OAAOA,EAAMkB,OACT,yBAAKF,UAAY,aACb,4BACKhB,EAAMmB,KAAK,SAAAR,GACT,OAAQ,kBAAC,EAAD,CAAaS,IAAKT,EAAKZ,GAAIY,KAAOA,SAKrD,yBAAKK,UAAW,SAAhB,0CCHOK,EAVA,WAAO,IACXrB,EAASc,qBAAWtB,GAApBQ,MACP,OACI,yBAAKgB,UAAU,UACX,kDACA,kDAAwBhB,EAAMkB,UCoB3BI,EAzBK,WAAO,IAChBlB,EAAYU,qBAAWtB,GAAvBY,QADe,EAEGR,mBAAS,IAFZ,mBAEhBC,EAFgB,KAET0B,EAFS,OAGK3B,mBAAS,IAHd,mBAGhBE,EAHgB,KAGR0B,EAHQ,KAatB,OACI,0BAAMC,SATO,SAACC,GAClBA,EAAEC,iBACFvB,EAAQP,EAAMC,GACdS,QAAQC,IAAIX,EAAMC,GAClByB,EAAS,IACTC,EAAU,MAKF,2BAAOI,KAAO,OAAOC,YAAa,aAAa1B,MAASN,EACxDiC,SAAY,SAACJ,GAAD,OAAOH,EAASG,EAAEK,OAAO5B,QAAQ6B,UAAQ,IACrD,2BAAOJ,KAAO,OAAOC,YAAa,cAAc1B,MAASL,EACxDgC,SAAY,SAACJ,GAAOF,EAAUE,EAAEK,OAAO5B,QAAS6B,UAAQ,IACxD,2BAAOJ,KAAM,SAASzB,MAAO,eCJ3B8B,MAbf,WACE,OACE,yBAAKjB,UAAU,OACf,kBAAC,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,SCAckB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5C,QAAQ4C,MAAMA,EAAMC,a","file":"static/js/main.204f7eed.chunk.js","sourcesContent":["// import React, { createContext, useState } from 'react';\n// // import uuid from uuid/v1;\n\n// export const BookContext = createContext();\n\n// const BookContextProvider = (props) => {\n//     const [books, setBooks] = useState([\n//         {title: 'name of the wind', author: 'patrick rothfuss', id: 1},\n//         {title: 'the final empire', author: 'brandon sanderson', id: 2}\n//       ]);\n\n     \n//       const addBook = (title,author) => {\n//         //   setBooks([...books,{title: title, author: author , id: uuid() }]);\n//           setBooks([...books,{title: title, author: author , id: Math.floor(Math.random() * 4)}]);\n//           console.log(title,author);\n//       }\n\n\n//       const removeBook = (id) => {\n//           setBooks(books.filter( book => {\n//             return  book.id !== id;\n//           }));\n//       }\n\n//       return(\n//           <BookContext.Provider value= {{books,addBook,removeBook}}>\n//               {props.children}\n//           </BookContext.Provider>\n//       )\n    \n\n// }\n\n\n// export default BookContextProvider;\n\n\n\n\nimport React, { createContext, useState } from 'react';\n// import uuid from 'uuid/v1';\n\nexport const BookContext = createContext();\n\nconst BookContextProvider = (props) => {\n  const [books, setBooks] = useState([\n    {title: 'name of the wind', author: 'patrick rothfuss', id: 1},\n    {title: 'the final empire', author: 'brandon sanderson', id: 2},\n  ]);\n  const addBook = (title, author) => {\n    // setBooks([...books, {title, author, id: uuid()}]);\n          setBooks([...books,{title: title, author: author , id: Math.random()}]);\n          console.log(title,author);\n\n\n  };\n  const removeBook = (id) => {\n    setBooks(books.filter(book => book.id !== id));\n  }\n\n  return (\n    <BookContext.Provider value={{ books, addBook, removeBook }}>\n      {props.children}\n    </BookContext.Provider>\n  );\n}\n \nexport default BookContextProvider;","import React , {useContext} from 'react';\nimport { BookContext } from '../contexts/BookContext';\n\nconst BookDetails = ({book}) => {\n const {removeBook} =  useContext(BookContext);\n\n\n    return ( \n\n        <li onClick = {() => removeBook(book.id)}>\n         <div className = \"title\">{book.title}</div>  \n         <div className = \"author\">{book.author}</div>   \n\n        </li>\n     );\n}\n \nexport default BookDetails;","import React, {useState, useContext} from 'react';\nimport BookDetails from './BookDetails';\nimport { BookContext } from '../contexts/BookContext';\n\nconst BookList = () => {\n\n   const {books} = useContext(BookContext);\n\n    return books.length ? (\n        <div className = \"book-list\">\n            <ul>\n                {books.map( book => {\n                   return (<BookDetails key={book.id} book= {book} />)\n                })}\n            </ul>\n        </div>\n    ) : (\n        <div className= \"empty\">We have no books to Read... Free Time</div>\n    );\n}\n \nexport default BookList;","import React, {useContext} from 'react';\nimport {BookContext} from '../contexts/BookContext';\n\n\nconst Navbar = () => {\n    const {books} = useContext(BookContext);\n    return ( \n        <div className=\"navbar\">\n            <h1>Ninja Reading List</h1>\n            <p> Currently you have {books.length}</p>\n        </div>\n     );\n}\n \nexport default Navbar;","import React, { useState ,useContext} from 'react';\nimport { BookContext } from '../contexts/BookContext';\n\n\nconst NewBookForm = () => {\n   const { addBook } = useContext(BookContext);\n   const [title, setTitle] = useState('');\n   const [author, setAuthor] = useState('');\n\nconst handleSubmit = (e) => {\n    e.preventDefault();\n    addBook(title,author);\n    console.log(title,author);\n    setTitle('');\n    setAuthor('');\n}\n\n    return ( \n        <form onSubmit ={handleSubmit} >\n            <input type = \"text\" placeholder= \"book title\" value = {title} \n            onChange = {(e) => setTitle(e.target.value)} required/>\n            <input type = \"text\" placeholder= \"book author\" value = {author}\n             onChange = {(e) => {setAuthor(e.target.value)}} required/>\n             <input type= \"submit\" value= \"Add Book\"/>\n\n        </form>\n     );\n}\n \nexport default NewBookForm;","import React from 'react';\nimport BookList from './components/BookList';\nimport Navbar from './components/Navbar';\nimport NewBookForm from './components/NewBookForm';\nimport BookContextProvider from './contexts/BookContext';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    <BookContextProvider>\n      <Navbar/>\n      <NewBookForm/>\n      <BookList/>\n\n    </BookContextProvider>\n    </div>\n  );\n}\n\nexport default App;\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}